// <auto-generated />
using System;
using DataLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(PatientManagerContext))]
    [Migration("20250123124447_ForeignKeyFix")]
    partial class ForeignKeyFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Models.Diagnosis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_diagnosis");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("End")
                        .HasColumnType("date")
                        .HasColumnName("end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint")
                        .HasColumnName("patient_id");

                    b.Property<DateOnly>("Start")
                        .HasColumnType("date")
                        .HasColumnName("start");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("DataLayer.Models.Examination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_examination");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<long?>("ExaminationType")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<long?>("patient_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationType");

                    b.HasIndex("patient_id");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("DataLayer.Models.ExaminationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_examination_type");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ExaminationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "GP",
                            Name = "General physical exam"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "KRV",
                            Name = "Blood test"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "X-RAY",
                            Name = "X-ray scan"
                        },
                        new
                        {
                            Id = 4L,
                            Code = "CT",
                            Name = "CT scan"
                        },
                        new
                        {
                            Id = 5L,
                            Code = "MR",
                            Name = "MRI scan"
                        },
                        new
                        {
                            Id = 6L,
                            Code = "ULTRA",
                            Name = "Ultrasound"
                        },
                        new
                        {
                            Id = 7L,
                            Code = "EKG",
                            Name = "Electrocardiogram"
                        },
                        new
                        {
                            Id = 8L,
                            Code = "ECHO",
                            Name = "Echocardiogram"
                        },
                        new
                        {
                            Id = 9L,
                            Code = "EYE",
                            Name = "Eye exam"
                        },
                        new
                        {
                            Id = 10L,
                            Code = "DERM",
                            Name = "Dermatology exam"
                        },
                        new
                        {
                            Id = 11L,
                            Code = "DENTA",
                            Name = "Dental exam"
                        },
                        new
                        {
                            Id = 12L,
                            Code = "MAMMO",
                            Name = "Mammogram"
                        },
                        new
                        {
                            Id = 13L,
                            Code = "NEURO",
                            Name = "Neurology exam"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<char>("Sex")
                        .HasColumnType("character(1)")
                        .HasColumnName("sex");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Sex = 'M'
                        },
                        new
                        {
                            Id = 2L,
                            Sex = 'F'
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_patient");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Oib")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("oib");

                    b.Property<long>("SexId")
                        .HasColumnType("bigint")
                        .HasColumnName("sex_id");

                    b.HasKey("Id");

                    b.HasIndex("SexId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DataLayer.Models.Perescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Perescriptions");
                });

            modelBuilder.Entity("DataLayer.Models.Diagnosis", b =>
                {
                    b.HasOne("DataLayer.Models.Patient", "Patient")
                        .WithMany("MedicalHistory")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataLayer.Models.Examination", b =>
                {
                    b.HasOne("DataLayer.Models.ExaminationType", "Type")
                        .WithMany()
                        .HasForeignKey("ExaminationType");

                    b.HasOne("DataLayer.Models.Patient", "Patient")
                        .WithMany("Examinations")
                        .HasForeignKey("patient_id");

                    b.Navigation("Patient");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DataLayer.Models.Patient", b =>
                {
                    b.HasOne("DataLayer.Models.Gender", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("DataLayer.Models.Patient", b =>
                {
                    b.Navigation("Examinations");

                    b.Navigation("MedicalHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
